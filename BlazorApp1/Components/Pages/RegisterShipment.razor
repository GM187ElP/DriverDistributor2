@page "/register-shipment"
@using System.Text.Json
@using BlazorApp1.Data
@using BlazorApp1.Entities
@using static BlazorApp1.Components.PersianDatePicker
@inject NavigationManager navigationManager
@inject AppDbContext dbContext
@inject IWebHostEnvironment Env

<PageTitle>Counter</PageTitle>

<MudRTLProvider RightToLeft="true">
    <MudForm @ref=form @bind-IsValid=success @bind-Errors=errors>
        <MudContainer>
            <MudGrid>
                <MudItem Class="mt-5" xs="4" sm="3" md="4">
                    <MudCheckBox @bind-Value=IsException
                    Label="حالت خاص" />

                    <MudCheckBox @bind-Value=dto.HasVip
                    Label="VIP" />

                    <MudDataGrid Class="mt-5" Items="LoadDriverDistributorRoutesAndCount(dto.DriverName,false)">
                        <Columns>
                            <PropertyColumn Property="x=>x.Name" Title="مسیر" />
                            <PropertyColumn Property="x=>x.Count" Title="دفعات" />
                        </Columns>
                    </MudDataGrid>
                    <br />
                    <MudDataGrid Class="mt-5" Items="LoadDriverDistributorRoutesAndCount(dto.DistributorName,true)">
                        <Columns>
                            <PropertyColumn Property="x=>x.Name" Title="مسیر" />
                            <PropertyColumn Property="x=>x.Count" Title="دفعات" />
                        </Columns>
                    </MudDataGrid>
                </MudItem>

                <MudItem xs="4" sm="6" md="4">
                    <MudAutocomplete Class="mt-5" T="string"
                    @bind-Value=dto.DriverName
                    Label="راننده"
                    SearchFunc="SearchDriver"
                    ToStringFunc="(x) => x"
                    Dense="true"
                    ResetValueOnEmptyText="true"
                    Clearable="true"
                    MaxItems="100"
                    Disabled=@(IsException && !string.IsNullOrWhiteSpace(dto.DistributorName)) />

                    <MudAutocomplete Class="mt-5" T="string"
                    @bind-Value=dto.DistributorName
                    Label="موزع"
                    SearchFunc="SearchDistributor"
                    ToStringFunc="(x) => x"
                    Dense="true"
                    ResetValueOnEmptyText="true"
                    Clearable="true"
                    MaxItems="100"
                    Disabled=@(IsException && !string.IsNullOrWhiteSpace(dto.DriverName)) />

                    <MudAutocomplete Class="mt-5" T="string"
                    @bind-Value=dto.RouteName
                    Label="مسیر"
                    SearchFunc="SearchRoute"
                    ToStringFunc="(x) => x"
                    Dense="true"
                    ResetValueOnEmptyText="true"
                    Clearable="true"
                    MaxItems="100"
                    Required=true />

                    <MudAutocomplete Class="mt-5" T="string"
                    @bind-Value=dto.WarehouseName
                    Label="انبار"
                    SearchFunc="SearchWarehouse"
                    ToStringFunc="(x) => x"
                    Dense="true"
                    ResetValueOnEmptyText="true"
                    Clearable="true"
                    MaxItems="100"
                    Disabled=IsException
                    Required=@(!IsException) />

                    <div class="mt-5">
                        <PersianDatePicker @bind-Value="dto.ShipmentDatePersian" />
                    </div>

                    <MudNumericField Class="mt-5" @bind-Value="dto.InvoiceCount" Label="تعداد فاکتور" Variant="Variant.Outlined" Min="0" Disabled=IsException Required=@(!IsException) />
                    <MudNumericField Class="mt-5" @bind-Value="dto.InvoiceAmount" Label="ریال فاکتور" Variant="Variant.Outlined" Min="0" Disabled=IsException Required=@(!IsException) />

                    @for (int i = 0; i < dto.ShipmentNumbers.Count; i++)
                    {
                        var index = i;
                        <div style="display: flex; gap: 10px;">
                            <MudNumericField T="int"
                            Label="خروجی"
                            @bind-Value="dto.ShipmentNumbers[index]"
                            Variant="Variant.Outlined"
                            Disabled=IsException />

                            <MudButton @onclick="@(() => DecrementShipmentCount(index))" Class=@(IsException?"invisible":"visible")>
                                <MudIcon Icon="@Icons.Material.Outlined.RemoveCircleOutline" Color="Color.Error" Size="Size.Small" />
                            </MudButton>
                        </div>
                    }

                    <MudButton @onclick="@(IncrementShipmentCount)" Class=@(IsException?"invisible":"visible")><MudIcon Icon="@Icons.Material.Outlined.AddCircleOutline" Color="Color.Success" Size="Size.Small" /></MudButton>
                </MudItem>

                <MudItem xs="12" sm="6" md="4">

                    <MudCheckBox @bind-Value="IsSecondService"
                    Label="سرویس دوم"
                    Disabled=IsException />
                    <MudNumericField Class="mt-5" @bind-Value="dto.SecondServiceInvoiceCount" Label="تعداد فاکتور" Variant="Variant.Outlined" Min="0" Disabled=@(!IsSecondService || IsException) Required=IsSecondService />
                    <MudNumericField Class="mt-5" @bind-Value="dto.SecondServiceInvoiceAmount" Label="ریال خالص فاکتور" Variant="Variant.Outlined" Min="0" Disabled=@(!IsSecondService || IsException) Required=IsSecondService />

                    <MudCheckBox @bind-Value="IsThirdService"
                    Label="سرویس سوم"
                    Disabled=!IsSecondService />

                    <MudNumericField Class="mt-5" @bind-Value="dto.ThirdServiceInvoiceCount" Label="تعداد فاکتور" Variant="Variant.Outlined" Min="0" Disabled=@(!IsThirdService || IsException) Required=IsThirdService />
                    <MudNumericField Class="mt-5" @bind-Value="dto.ThirdServiceInvoiceAmount" Label="ریال خالص فاکتور" Variant="Variant.Outlined" Min="0" Disabled=@(!IsThirdService || IsException) Required=IsThirdService />

                    <MudButton Variant="Variant.Outlined" onclick="ClearForm">پاک کردن</MudButton>
                    <MudButton Variant="Variant.Outlined" OnClick=Cancel>انصراف</MudButton>
                    <MudButton Variant="Variant.Outlined" OnClick=AddShipmentToList ButtonType=ButtonType.Submit Disabled=!IsSuccess()>ذخیره</MudButton>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudForm>
</MudRTLProvider>


@code {

    private MudForm form;
    private ShipmentAddDto dto = new();
    private PersianCalendarClass Persian = new();

    private bool isSecondService = false;
    private bool isThirdService = false;
    private bool isException = false;
    private bool success = false;
    private string[] errors = [];

    private List<int> shipmentNumbersList = [];
    private List<Driver> drivers = [];
    private List<Distributor> distributors = [];
    private List<Route> routes = [];
    private List<Route> extRoutes = [];
    private List<Warehouse> warehouses = [];

    public bool IsException
    {
        get => isException;
        set
        {
            isException = value;
            if (isException)
            {
                dto = new();
                dto.ShipmentNumbers.Add(0);
                IsSecondService = false;
            }
            LoadData(isException);

            StateHasChanged();
        }
    }
    public bool IsSecondService
    {
        get => isSecondService;
        set
        {
            isSecondService = value;
            if (!isSecondService)
            {
                isThirdService = false;
                dto.ThirdServiceInvoiceAmount = dto.ThirdServiceInvoiceCount = 0;
                dto.SecondServiceInvoiceAmount = dto.SecondServiceInvoiceCount = 0;
            }
        }
    }
    public bool IsThirdService
    {
        get => isThirdService;
        set
        {
            isThirdService = value;
            if (!isThirdService)
                dto.ThirdServiceInvoiceAmount = dto.ThirdServiceInvoiceCount = 0;
        }
    }

    List<RoutesCount> LoadDriverDistributorRoutesAndCount(string name, bool isDistributor)
    {
        if (name == null)
            return [];

        var query = dbContext.Shipments.AsQueryable();

        if (isDistributor)
            query = query.Where(s => s.DistributorName == name);
        else
            query = query.Where(s => s.DriverName == name);

        return query
            .GroupBy(s => s.RouteName)
            .Select(g => new RoutesCount
                {
                    Name = g.Key,
                    Count = g.Count()
                })
            .ToList();
    }

    public class RoutesCount
    {
        public string Name { get; set; }
        public int Count { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        Persian.GregorianDate = DateTime.Today;
        dto.ShipmentNumbers.Add(0);
        LoadData(isException);
    }

    private void LoadData(bool isExc)
    {
        drivers = dbContext.Drivers.ToList();
        distributors = dbContext.Distributors.ToList();
        warehouses = dbContext.Warehouses.ToList();
        routes = !isExc ? dbContext.Routes.Where(r => !r.IsExt).ToList() : dbContext.Routes.Where(r => r.IsExt).ToList();
    }

    private void IncrementShipmentCount()
    {
        dto.ShipmentNumbers.Add(0);
    }

    private void DecrementShipmentCount(int index)
    {
        if (dto.ShipmentNumbers.Count > 1)
        {
            dto.ShipmentNumbers.RemoveAt(index);
        }
    }

    private void Cancel() => navigationManager.NavigateTo("/");

    private void ClearForm()
    {
        dto = new();
        dto.ShipmentNumbers.Add(0);
        IsSecondService = false;
        IsThirdService = false;
        StateHasChanged();
    }

    private bool IsSuccess()
    {
        if (isException)
        {
            if (string.IsNullOrWhiteSpace(dto.DistributorName))
                return !string.IsNullOrWhiteSpace(dto.DriverName) && !string.IsNullOrWhiteSpace(dto.RouteName) && !string.IsNullOrWhiteSpace(dto.ShipmentDatePersian);

            else if (string.IsNullOrWhiteSpace(dto.DriverName))
                return !string.IsNullOrWhiteSpace(dto.DistributorName) && !string.IsNullOrWhiteSpace(dto.RouteName) && !string.IsNullOrWhiteSpace(dto.ShipmentDatePersian);

            else
                return false;
        }
        else
        {
            if (IsSecondService && !IsThirdService)
                return !string.IsNullOrWhiteSpace(dto.DistributorName) && !string.IsNullOrWhiteSpace(dto.DriverName) && !string.IsNullOrWhiteSpace(dto.RouteName) && !string.IsNullOrWhiteSpace(dto.WarehouseName) && dto.SecondServiceInvoiceAmount != 0 && dto.SecondServiceInvoiceCount != 0 && dto.InvoiceCount != 0 && dto.InvoiceAmount != 0 && !string.IsNullOrWhiteSpace(dto.ShipmentDatePersian);

            if (IsThirdService)
                return !string.IsNullOrWhiteSpace(dto.DistributorName) && !string.IsNullOrWhiteSpace(dto.DriverName) && !string.IsNullOrWhiteSpace(dto.RouteName) && !string.IsNullOrWhiteSpace(dto.WarehouseName) && dto.SecondServiceInvoiceAmount != 0 && dto.SecondServiceInvoiceCount != 0 && dto.InvoiceCount != 0 && dto.InvoiceAmount != 0 && dto.ThirdServiceInvoiceCount != 0 && dto.ThirdServiceInvoiceAmount != 0 && !string.IsNullOrWhiteSpace(dto.ShipmentDatePersian);

            else
                return !string.IsNullOrWhiteSpace(dto.DistributorName) && !string.IsNullOrWhiteSpace(dto.DriverName) && !string.IsNullOrWhiteSpace(dto.RouteName) && !string.IsNullOrWhiteSpace(dto.WarehouseName) && dto.InvoiceCount != 0 && dto.InvoiceAmount != 0 && !string.IsNullOrWhiteSpace(dto.ShipmentDatePersian);
        }
    }

    private async Task AddShipmentToList()
    {
        if (!IsSuccess())
            return;

        dto.IsException = IsException;
        dto.DriverPersonnelCode = dbContext.Drivers.FirstOrDefault(d => d.Name == dto.DriverName)!.PersonnelCode;
        dto.DistributorPersonnelCode = dbContext.Distributors.FirstOrDefault(d => d.Name == dto.DistributorName)!.PersonnelCode;

        var shipment = new Shipment();
        foreach (var number in dto.ShipmentNumbers)
        {
            if (number != 0)
            {
                shipment.ShipmentNumbers.Add(new ShipmentNumber
                    {
                        Number = number,
                        Shipment = shipment
                    });
            }
        }

        dbContext.Shipments.Add(shipment);
        await dbContext.SaveChangesAsync();

        dto = new();
        StateHasChanged();
    }

    private Task<IEnumerable<string>> SearchDriver(string text, CancellationToken cancellationToken = default)
    {
        text ??= "";
        var results = drivers
            .Where(d => d.Name.Contains(text, StringComparison.OrdinalIgnoreCase))
            .Select(d => $"{d.Name}");

        return Task.FromResult(results);
    }

    private Task<IEnumerable<string>> SearchDistributor(string text, CancellationToken cancellationToken = default)
    {
        text ??= "";
        var results = distributors
            .Where(d => d.Name.Contains(text, StringComparison.OrdinalIgnoreCase))
            .Select(d => $"{d.Name}");

        return Task.FromResult(results);
    }

    private Task<IEnumerable<string>> SearchRoute(string text, CancellationToken cancellationToken = default)
    {
        text ??= "";



        var results = routes
            .Where(d => d.Name.Contains(text, StringComparison.OrdinalIgnoreCase))
            .Select(d => $"{d.Name}");

        return Task.FromResult(results.AsEnumerable());
    }

    private Task<IEnumerable<string>> SearchWarehouse(string text, CancellationToken cancellationToken = default)
    {
        text ??= "";
        var results = warehouses
            .Where(d => d.Name.Contains(text, StringComparison.OrdinalIgnoreCase))
            .Select(d => $"{d.Name}");
        return Task.FromResult(results);
    }
}