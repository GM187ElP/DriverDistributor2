@using System.Globalization
@using MudBlazor
@using System.Text.Json
@inject IWebHostEnvironment env

<MudStack Direction="Row" AlignItems="AlignItems.Start" Spacing="2" Class="inline-stack">
    <MudTextField Value="@Persian.Date"
    Label=@Label
    ReadOnly="true"
    Adornment="Adornment.End"
    AdornmentIcon="@Icons.Material.Filled.DateRange"
    OnAdornmentClick="ToggleDatePicker"
    @onclick="ToggleDatePicker" />

    <!-- Date picker popover -->
    <MudPopover Open="@_isDatePickerOpen"
    AnchorOrigin="Origin.BottomCenter"
    TransformOrigin="Origin.TopCenter"
    CloseOnOutsideClick="true"
    OnClose="ClosePicker">
        <MudPaper Class="pa-4" Style="width: 300px;">

            <!-- Navigation: month/year/today -->
            <div class="d-flex justify-space-between align-center mb-2">
                <MudIconButton Icon="@Icons.Material.Filled.ArrowForwardIos" OnClick="@PrevMonth" />

                <!-- Month Name Button -->
                <MudButton Typo="Typo.h6" Class="mx-auto" OnClick="ToggleMonthPicker">
                    @Persian.MonthString
                </MudButton>

                <MudButton Typo="Typo.h6" Class="mx-auto" OnClick="ToggleYearPicker">
                    @Persian.Year
                </MudButton>

                <MudPopover Open="@_isYearPickerOpen"
                AnchorOrigin="Origin.BottomCenter"
                TransformOrigin="Origin.TopCenter"
                CloseOnOutsideClick="true"
                OnClose="() => IsYearPickerOpen = false">
                    <MudPaper Class="pa-2" Style="width: 150px; text-align:center;">

                        <MudNumericField T="int"
                        @bind-Value="_tempYearInput"
                        Min="1279"
                        Max="9377"
                        Dense="true"
                        Class="mud-width-full year-input"
                        Variant="Variant.Outlined"
                        InputClass="text-center" />

                        <MudButton Size="Size.Small"
                        Variant="Variant.Outlined"
                        Class="mt-2 mud-width-full"
                        OnClick="ApplyYearFromInput">
                            تایید
                        </MudButton>

                    </MudPaper>
                </MudPopover>

                <MudButton Class="mt-2" Variant="Variant.Text" OnClick="@(()=>GoToDay(-1))">
                    دیروز
                </MudButton>

                <MudButton Class="mt-2" Variant="Variant.Text" OnClick="@(()=>GoToDay())">
                    امروز
                </MudButton>

                <MudButton Class="mt-2" Variant="Variant.Text" OnClick="@(()=>GoToDay(1))">
                    فردا
                </MudButton>
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIos" OnClick="@NextMonth" />
            </div>

            <!-- Month List Popover -->
            <MudPopover Open="@_isMonthPickerOpen"
            AnchorOrigin="Origin.CenterCenter"
            TransformOrigin="Origin.TopCenter"
            CloseOnOutsideClick="true"
            OnClose="CloseMonthPicker">
                <div style="width: 220px; max-width: 100%; padding: 8px;">
                    <table class="calendar-month-table">
                        @for (int i = 0; i < 3; i++)
                        {
                            <tr>
                                @for (int j = 0; j < 4; j++)
                                {
                                    var index = i * 4 + j;
                                    <td>
                                        <button class="@(IsSelectedMonth(index + 1) ? "selected-month" : "")"
                                        @onclick="@(() => SelectMonth(index + 1))">
                                            @monthList[index]
                                        </button>
                                    </td>
                                }
                            </tr>
                        }
                    </table>
                </div>
            </MudPopover>

            <!-- Days Grid -->
            <table class="calendar-table">
                <thead>
                    <tr>
                        @foreach (var dayName in PersianDayNames)
                        {
                            <th>@dayName</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @for (int week = 0; week < GetMonthLengthWeekCount(_gridDays[21].PersianYear, _gridDays[21].PersianMonth); week++)
                    {
                        <tr>
                            @for (int day = 0; day < 7; day++)
                            {
                                int index = week * 7 + day;
                                var cell = _gridDays[index];
                                <td class="@GetCellClass(cell)">
                                    <button @onclick="() => SelectDay(cell.Date)">@cell.PersianDay</button>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </MudPaper>
    </MudPopover>
</MudStack>




<style>


    .small-date-input {
    width: auto !important;
    max-width: 160px;
    }

    .inline-field {
    display: inline-flex;
    vertical-align: baseline;
    }


    .calendar-table {
    width: 100%;
    border-collapse: collapse;
    table-layout: fixed;
    text-align: center;
    }

    .calendar-table thead tr {
    border-bottom: 5px solid transparent;
    background-color: lightgray;
    }


    .year-input input {
    text-align: center !important;
    font-size: 0.875rem;
    }

    .calendar-month-table {
    width: 100%;
    border-collapse: collapse;
    table-layout: fixed;
    text-align: center;
    }

    .calendar-month-table td button {
    width: 100%;
    padding: 6px 0;
    border: none;
    background: none;
    cursor: pointer;
    }


    .calendar-table td button {
    width: 100%;
    height: 100%;
    background: none;
    border: none;
    }

    .calendar-table td.holiday {
    background-color: #ffe5e5;
    }

    .calendar-table td.today {
    border: 2px solid #1976d2;
    }

    .calendar-table td.selected {
    background-color: #cce5ff;
    }

    .calendar-table td.faded {
    opacity: 0.4;
    }

    .selected-month {
    background-color: cyan;
    color: blue;
    border-radius: 4px;
    }

    .inline-stack {
    display: inline-flex;
    align-items: center;
    }

</style>

@code {
    [Parameter] public PersianCalendarClass? Persian { get; set; } 
    [Parameter] public GregorianCalendarClass? Gregorian { get; set; } 
    [Parameter] public EventCallback<string> SelectedDateChanged { get; set; }
    [Parameter] public string Label { get; set; } = "تاریخ";

    private readonly string[] PersianDayNames = { "ش", "ی", "د", "س", "چ", "پ", "ج" };
    private readonly string[] monthList = { "فروردین", "اردیبهشت", "خرداد", "تیر", "اَمرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند" };

    private int _selectedYear;
    private int _tempYearInput;
    private bool _isDatePickerOpen = false;
    private bool _isMonthPickerOpen = false;
    private bool _isYearPickerOpen = false;
    private DateTime _currentMonth;

    private List<Day> _gridDays = new();
    private Dictionary<string, List<int[]>> _holidays = new();

    private PersianCalendar Pc;

    protected override void OnInitialized()
    {
        Pc = new();
        var now = DateTime.Today;
        string path = Path.Combine(env.ContentRootPath, "wwwroot", "json", "holidays.json");

        if (File.Exists(path))
        {
            string json = File.ReadAllText(path);
            _holidays = JsonSerializer.Deserialize<Dictionary<string, List<int[]>>>(json) ?? new();
        }

        if (Gregorian is null || Persian is null)
        {
            if (Gregorian is null)
                Gregorian.Date = DateTime.Today;
            else
                Persian.Date = $"{Pc.GetYear(now):0000}/{Pc.GetMonth(now):00}/{Pc.GetDayOfMonth(now):00}";
        }

        _currentMonth = Gregorian.Date;
        _selectedYear = Pc.GetYear(_currentMonth);
        _tempYearInput = Pc.GetYear(_currentMonth);
        base.OnInitialized();
        UpdateGridDays();
    }

    private void ApplyYearFromInput()
    {
        _selectedYear = _tempYearInput;

        var month = Pc.GetMonth(_currentMonth);
        _currentMonth = Pc.ToDateTime(_selectedYear, month, 1, 0, 0, 0, 0);
        UpdateGridDays();

        _isYearPickerOpen = false;
    }

    private void ToggleDatePicker() => _isDatePickerOpen = !_isDatePickerOpen; // datefield
    private void CloseDatePicker() => _isDatePickerOpen = false;

    private void ToggleMonthPicker() => _isMonthPickerOpen = !_isMonthPickerOpen; // month button
    private void CloseMonthPicker() => _isMonthPickerOpen = false;

    private void ToggleYearPicker()
    {
        _tempYearInput = Pc.GetYear(_currentMonth);
        _isYearPickerOpen = !_isYearPickerOpen;
    } // year button
    private void CloseYearPicker() => _isYearPickerOpen = false;

    private void SelectMonth(int month)
    {
        int year = Pc.GetYear(_currentMonth);
        _currentMonth = Pc.ToDateTime(year, month, 1, 0, 0, 0, 0);
        UpdateGridDays();
        _isMonthPickerOpen = false;
    } // month popover

    private bool IsSelectedMonth(int month) => Pc.GetMonth(_currentMonth) == month; // month popover(marking the current month)

    private void PrevMonth() // prev month button
    {
        _currentMonth = _currentMonth.AddMonths(-1);
        UpdateGridDays();
    }

    private void NextMonth() // next month button
    {
        _currentMonth = _currentMonth.AddMonths(1);
        UpdateGridDays();
    }

    private void SelectDay(DateTime date, DayOfWeek weekStartDay = DayOfWeek.Saturday) // daysgrid onclick event
    {
        var year = Pc.GetYear(date);
        var month = Pc.GetMonth(date);
        var dayOfMonth = Pc.GetDayOfMonth(date);

        Persian.GregorianDate = date;
        Persian.Date = $"{year:0000}/{month:00}/{dayOfMonth:00}";
        Persian.DayOfMonth = dayOfMonth.ToString("00");
        Persian.NumberOfDaysInMonth = Pc.GetDaysInMonth(year, month);
        Persian.NumberOfDaysInYear = Pc.GetDaysInYear(year);
        Persian.DayOfWeek = GetPersianWeekday(Pc.GetDayOfWeek(date));
        Persian.DayOfYear = Pc.GetDayOfYear(date).ToString("000");
        Persian.Month = month.ToString("00");
        Persian.MonthString = GetPersianMonthName(month);
        Persian.WeekOfYear = Pc.GetWeekOfYear(date, CalendarWeekRule.FirstFullWeek, weekStartDay).ToString("00");
        Persian.Year = year.ToString("0000");
        Persian.IsLeapYear = Pc.IsLeapYear(year);

        Gregorian.Date = date;
        Gregorian.DateString = date.ToString("yyyy/MM/dd");
        Gregorian.DayOfMonth = date.ToString("dd");
        Gregorian.DayOfWeek = date.ToString("dddd");
        Gregorian.DayOfYear = date.DayOfYear.ToString("000");
        Gregorian.Month = date.ToString("MM");
        Gregorian.MonthString = date.ToString("MMMM");
        Gregorian.MonthStringAbbr = date.ToString("MMM");
        Gregorian.Year = date.Year.ToString("0000");
        Gregorian.IsLeapYear = DateTime.IsLeapYear(date.Year);

        SelectedDateChanged.InvokeAsync(date);
        _currentMonth = date;
        UpdateGridDays();
        _isDatePickerOpen = false;
    }

    private void GoToDay(int offset=0) // today button, tommorow button
    {
        var today = DateTime.Today.AddDays(offset);
        Gregorian.Date = today;
        _currentMonth = today;
        _selectedYear = Pc.GetYear(today);

        UpdateGridDays();
        SelectedDateChanged.InvokeAsync(Gregorian.Date);
    }

    private void UpdateGridDays() // nextmonth, prevmonth,ApplyYearFromInput, oninit, selectmonth, selectday, gototoday
    {
        int year = Pc.GetYear(_currentMonth);
        int month = Pc.GetMonth(_currentMonth);
        _gridDays = MonthRange(year, month);
        AddHolidays(_gridDays);
    }

    private void AddHolidays(List<Day> gridDays) // UpdateGridDays
    {
        if (_holidays == null) return;

        var years = gridDays.Select(g => g.PersianYear).Distinct();

        foreach (var year in years)
        {
            if (!_holidays.TryGetValue(year.ToString(), out var yearData))
                continue;

            foreach (var holidayArr in yearData)
            {
                if (holidayArr.Length < 2) continue;

                int month = holidayArr[0];
                int day = holidayArr[1];

                var dayEntry = gridDays.FirstOrDefault(g => g.PersianMonth == month && g.PersianDay == day);
                if (dayEntry != null)
                    dayEntry.IsHoliday = true;
            }
        }
    }

    private int GetMonthLengthWeekCount(int year, int month) // days grid
    {
        var monthLength = Pc.GetDaysInMonth(year,month);
        var firstDay = Pc.ToDateTime(year, month, 1, 0, 0, 0, 0);
        if ((monthLength == 31 && (firstDay.DayOfWeek == DayOfWeek.Thursday || firstDay.DayOfWeek == DayOfWeek.Friday)) || (monthLength == 30 && firstDay.DayOfWeek == DayOfWeek.Friday))
            return 6;
        else
            return 5;
    }

    private List<Day> MonthRange(int year, int month) // updategriddays
    {
        var thisMonthFirstDate = Pc.ToDateTime(year, month, 1, 0, 0, 0, 0);
        var thisMonthLastDate = thisMonthFirstDate.AddDays(Pc.GetDaysInMonth(year, month) - 1);

        var gridFirstDate = thisMonthFirstDate.AddDays(-PersianWeekday(thisMonthFirstDate.DayOfWeek));
        var gridLastDate = thisMonthLastDate.AddDays(6 - PersianWeekday(thisMonthLastDate.DayOfWeek));

        (int year, int month) lastMonth = month - 1 == 0 ? (year - 1, 12) : (year, month - 1);
        (int year, int month) nextMonth = month + 1 == 13 ? (year + 1, 1) : (year, month + 1);

        var lastMonthRange = new List<Day>();
        var nextMonthRange = new List<Day>();
        var thisMonthRange = new List<Day>();

        for (int i = 0; i < (thisMonthFirstDate - gridFirstDate).Days; i++)
        {
            var date = gridFirstDate.AddDays(i);
            lastMonthRange.Add(new Day(date, PersianDayNames[PersianWeekday(date.DayOfWeek)], date.DayOfWeek == DayOfWeek.Friday, lastMonth.year, lastMonth.month, Pc.GetDayOfMonth(date)));
        }
        for (int i = 0; i <= (thisMonthLastDate - thisMonthFirstDate).Days; i++)
        {
            var date = thisMonthFirstDate.AddDays(i);
            thisMonthRange.Add(new Day(date, PersianDayNames[PersianWeekday(date.DayOfWeek)], date.DayOfWeek == DayOfWeek.Friday, year, month, Pc.GetDayOfMonth(date)));
        }
        for (int i = 0; i < (gridLastDate - thisMonthLastDate).Days; i++)
        {
            var date = thisMonthLastDate.AddDays(i + 1);
            nextMonthRange.Add(new Day(date, PersianDayNames[PersianWeekday(date.DayOfWeek)], date.DayOfWeek == DayOfWeek.Friday, nextMonth.year, nextMonth.month, Pc.GetDayOfMonth(date)));
        }

        var gridDaysList = new List<Day>();
        gridDaysList.AddRange(lastMonthRange);
        gridDaysList.AddRange(thisMonthRange);
        gridDaysList.AddRange(nextMonthRange);

        return gridDaysList;
    }

    private int PersianWeekday(DayOfWeek dayOfWeek) => dayOfWeek switch
    {
        DayOfWeek.Saturday => 0,
        DayOfWeek.Sunday => 1,
        DayOfWeek.Monday => 2,
        DayOfWeek.Tuesday => 3,
        DayOfWeek.Wednesday => 4,
        DayOfWeek.Thursday => 5,
        DayOfWeek.Friday => 6,
        _ => 0
    }; // month range

    private string GetPersianMonthName(int month) => month switch
    {
        1 => "فروردین",
        2 => "اردیبهشت",
        3 => "خرداد",
        4 => "تیر",
        5 => "اَمرداد",
        6 => "شهریور",
        7 => "مهر",
        8 => "آبان",
        9 => "آذر",
        10 => "دی",
        11 => "بهمن",
        12 => "اسفند",
        _ => ""
    }; // select day

    private string GetPersianWeekday(DayOfWeek day) => day switch
    {
        DayOfWeek.Saturday => "شنبه",
        DayOfWeek.Sunday => "یکشنبه",
        DayOfWeek.Monday => "دوشنبه",
        DayOfWeek.Tuesday => "سه شنبه",
        DayOfWeek.Wednesday => "چهارشنبه",
        DayOfWeek.Thursday => "پنجشنبه",
        DayOfWeek.Friday => "جمعه",
        _ => ""
    }; // select day

    private string GetCellClass(Day day) // days grid
    {
        var classes = new List<string>();

        if (day.IsHoliday)
            classes.Add("holiday");

        if (day.Date.Date == DateTime.Today)
            classes.Add("today");

        if (day.Date.Date == Gregorian.Date)
            classes.Add("selected");

        if (day.PersianMonth != _gridDays[21].PersianMonth)
            classes.Add("faded");

        return string.Join(" ", classes);
    }

    private class Day
    {
        public Day(DateTime date, string weekday, bool isHoliday, int persianYear, int persianMonth, int persianDay)
        {
            Date = date;
            Weekday = weekday;
            IsHoliday = isHoliday;
            PersianYear = persianYear;
            PersianMonth = persianMonth;
            PersianDay = persianDay;
        }

        public DateTime Date { get; set; }
        public string Weekday { get; set; }
        public bool IsHoliday { get; set; }
        public int PersianYear { get; set; }
        public int PersianMonth { get; set; }
        public int PersianDay { get; set; }
    }

    public class PersianCalendarClass
    {
        public DateTime GregorianDate { get; set; }
        public string Date { get; set; }
        public string DayOfMonth { get; set; }
        public int NumberOfDaysInMonth { get; set; }
        public int NumberOfDaysInYear { get; set; }
        public string DayOfWeek { get; set; }
        public string DayOfYear { get; set; }
        public string Month { get; set; }
        public string MonthString { get; set; }
        public string WeekOfYear { get; set; }
        public string Year { get; set; }
        public bool IsLeapYear { get; set; }
    }

    public class GregorianCalendarClass
    {
        public DateTime Date { get; set; }
        public string DateString { get; set; }
        public string DayOfMonth { get; set; }
        public string DayOfWeek { get; set; }
        public string DayOfYear { get; set; }
        public string Month { get; set; }
        public string MonthString { get; set; }
        public string MonthStringAbbr { get; set; }
        public string Year { get; set; }
        public bool IsLeapYear { get; set; }
    }
}

@code{
   // private int GetPersianMonthLength(int year, int month) => month switch
   //  {
   //      <= 6 => 31,
   //      <= 11 => 30,
   //      12 => MonthLength(year),
   //      _ => 0
   //  };

    // private int MonthLength(int year)
    // {
    //     int monthLength = 29;
    //     try
    //     {
    //         Pc.ToDateTime(year, 12, 30, 0, 0, 0, 0);
    //         monthLength = 30;
    //     }
    //     catch
    //     {
    //     }
    //     return monthLength;
    // }

    // private string FormatPersianDate(DateTime dt)
    // {
    //     var y = Pc.GetYear(dt);
    //     var m = Pc.GetMonth(dt);
    //     var d = Pc.GetDayOfMonth(dt);
    //     return $"{y:0000}/{m:00}/{d:00}";
    // }

    // private MudBlazor.Variant GetDayVariant(DateTime day)
    // {
    //     if (Gregorian.Date == day.Date)
    //         return MudBlazor.Variant.Outlined;
    //     if (day.Date == DateTime.Today)
    //         return MudBlazor.Variant.Outlined;
    //     return MudBlazor.Variant.Text;
    // }

    // private class DayMonthDto
    // {
    //     public int Month { get; set; }
    //     public int Day { get; set; }
    // }

    // int StringToInteger(string stringData)
    // {
    //     if (int.TryParse(stringData, out int integerData))
    //         return integerData;
    //     else
    //         return 1;
    // }
}